{"version":3,"sources":["components/AnimeWater.js","shaders/AnimeWater/vertex.js","shaders/AnimeWater/fragment.js"],"names":["AnimeWaterMesh","stoneTexture","useLoader","TextureLoader","wrapS","THREE","wrapT","noiseTexture","distortTexture","material","extensions","derivatives","side","transparent","vertexShader","fragmentShader","uniforms","time","value","type","resolution","clock","useFrame","getElapsedTime","args","AnimeWater","inspiration","useEffect","document","title","gl","antialias","alpha","camera","position","near","far","onCreated","setClearColor","intensity","fallback","className","style","color","href"],"mappings":"uKASA,SAASA,IACL,IAAMC,EAAeC,YAAUC,IAAe,gCAC9CF,EAAaG,MAAQC,iBACrBJ,EAAaK,MAAQD,iBACrB,IAAME,EAAeL,YAAUC,IAAe,qCAC9CI,EAAaH,MAAQC,iBACrBE,EAAaD,MAAQD,iBACrB,IAAMG,EAAiBN,YAAUC,IAAe,wCAChDK,EAAeJ,MAAQC,iBACvBG,EAAeF,MAAQD,iBACvB,IAAMI,EAAW,IAAIJ,iBAAqB,CACtCK,WAAY,CACVC,YAAa,mDAEfC,KAAMP,aACNQ,aAAa,EACbC,aCzBiB,oWD0BjBC,eE1BmB,msBF2BnBC,SAAU,CACRC,KAAM,CACJC,MAAO,GAETjB,aAAc,CAACkB,KAAK,KAAMD,MAAOjB,GACjCM,aAAc,CAACY,KAAK,KAAMD,MAAOX,GACjCC,eAAgB,CAACW,KAAK,KAAMD,MAAOV,GACnCY,WAAY,CAAED,KAAM,KAAMD,MAAO,IAAIb,cAGnCgB,EAAQ,IAAIhB,QAKlB,OAJAiB,aAAS,WACP,IAAIL,EAAOI,EAAME,iBACjBd,EAASO,SAASC,KAAKC,MAAQD,KAG/B,sBAAMR,SAAUA,EAAhB,SACE,qCAAqBe,KAAM,CAAC,IAAI,IAAI,SAmC/BC,UA/Bf,YAAsC,IAAhBC,EAAe,EAAfA,YAQpB,OAPAC,qBAAU,WAER,OADAC,SAASC,MAAQ,cACV,WACLD,SAASC,MAAQ,cAElB,IAGD,qCACE,eAAC,IAAD,CACEC,GAAI,CAAEC,WAAW,EAAOC,OAAO,GAC/BC,OAAQ,CAAEC,SAAU,CAAC,EAAG,GAAI,GAAIC,KAAM,KAAOC,IAAK,KAClDC,UAAW,qBAAGP,GAAYQ,cAAc,UAH1C,UAKE,iCACA,4BAAYJ,SAAU,CAAC,IAAK,IAAK,KAAMK,UAAW,MAClD,cAAC,WAAD,CAAUC,SAAU,0BAApB,SACE,cAACxC,EAAD,MAEF,cAAC,IAAD,OAED0B,GACC,sBAAKe,UAAU,cAAcC,MAAO,CAACC,MAAM,SAA3C,2BACgB,mBAAGC,KAAMlB,EAAT,0B","file":"static/js/7.b3641490.chunk.js","sourcesContent":["import React, { Suspense,useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Canvas, useFrame,useLoader } from \"react-three-fiber\";\r\nimport { vertexShader } from \"../shaders/AnimeWater/vertex\";\r\nimport { fragmentShader } from \"../shaders/AnimeWater/fragment\";\r\nimport { TextureLoader } from \"three/src/loaders/TextureLoader.js\";\r\n// import DatGui, { DatBoolean, DatColor } from \"react-dat-gui\";\r\nimport \"react-dat-gui/dist/index.css\";\r\nimport {OrbitControls} from '@react-three/drei'\r\nfunction AnimeWaterMesh() {        \r\n    const stoneTexture = useLoader(TextureLoader, \"images/AnimeWater/stones.jpg\");  \r\n    stoneTexture.wrapS = THREE.RepeatWrapping;\r\n    stoneTexture.wrapT = THREE.RepeatWrapping;          \r\n    const noiseTexture = useLoader(TextureLoader, \"images/AnimeWater/worleynoise.jpg\");  \r\n    noiseTexture.wrapS = THREE.RepeatWrapping;\r\n    noiseTexture.wrapT = THREE.RepeatWrapping;          \r\n    const distortTexture = useLoader(TextureLoader, \"images/GradientFire/rainbowcloud.jpg\");  \r\n    distortTexture.wrapS = THREE.RepeatWrapping;\r\n    distortTexture.wrapT = THREE.RepeatWrapping;          \r\n    const material = new THREE.ShaderMaterial({        \r\n        extensions: {\r\n          derivatives: \"#extension GL_OES_standard_derivatives : enable\",\r\n        },\r\n        side: THREE.DoubleSide,\r\n        transparent: true,\r\n        vertexShader:vertexShader,\r\n        fragmentShader:fragmentShader,\r\n        uniforms: {\r\n          time: {\r\n            value: 0.0,\r\n          },\r\n          stoneTexture: {type:\"v4\", value :stoneTexture},\r\n          noiseTexture: {type:\"v4\", value :noiseTexture},\r\n          distortTexture: {type:\"v4\", value :distortTexture},\r\n          resolution: { type: \"v4\", value: new THREE.Vector4() },          \r\n        },\r\n      });\r\n      const clock = new THREE.Clock();\r\n      useFrame(() => {\r\n        let time = clock.getElapsedTime();\r\n        material.uniforms.time.value = time;\r\n      });\r\n      return (\r\n        <mesh material={material}>\r\n          <planeBufferGeometry args={[2.5,2.5,2.5]} />\r\n        </mesh>\r\n      );\r\n}\r\nfunction AnimeWater({ inspiration }) {  \r\n  useEffect(() => {\r\n    document.title = \"Anime Water\"\r\n    return ()=>{\r\n      document.title = \"WebGlfun\"\r\n    }\r\n  }, [])\r\n  \r\n  return (\r\n    <>\r\n      <Canvas\r\n        gl={{ antialias: false, alpha: false }}\r\n        camera={{ position: [0, 0, -2], near: 0.001, far: 1000 }}\r\n        onCreated={({ gl }) => gl.setClearColor(\"black\")}\r\n      >\r\n        <ambientLight />\r\n        <pointLight position={[150, 150, 150]} intensity={0.55} />\r\n        <Suspense fallback={<group></group>}>\r\n          <AnimeWaterMesh />\r\n        </Suspense>\r\n        <OrbitControls/>        \r\n      </Canvas>\r\n      {inspiration && (\r\n        <div className=\"inspiration\" style={{color:\"white\"}}>\r\n          Inspired from <a href={inspiration}>post</a>\r\n        </div>\r\n      )}\r\n      {/* <Shaders vertex={vertexShader} fragment={fragmentShader} /> */}\r\n    </>\r\n  );\r\n}\r\nexport default AnimeWater;\r\n","export const vertexShader = `\r\nuniform float time;\r\nuniform float cartoon;\r\nvarying vec2 vUv;\r\nvarying vec2 vUv_a;\r\nvarying vec3 vPosition;\r\nfloat PI = 3.141592653589793238;\r\nvoid main(){\r\n  vUv = uv;\r\n  vUv_a = uv;\r\n  vUv_a.y -= fract(time*0.08);\r\n  vUv_a.x -= fract(time*.02);  \r\n  vec3 pos = position;  \r\n \tgl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\r\n}\r\n`;\r\n","export const fragmentShader = `\r\nuniform float time;\r\nuniform sampler2D stoneTexture;\r\nuniform sampler2D noiseTexture;\r\nuniform sampler2D distortTexture;\r\nuniform vec4 resolution;\r\nvarying vec2 vUv;\r\nvarying vec2 vUv_a;\r\nvarying vec3 vPosition;\r\nfloat PI = 3.141592653589793238;\r\n\r\nvoid main(){    \r\n    vec2 v_uv = vUv;            \r\n    vec2 v_uv_a = vUv_a;         \r\n    vec4 dist = texture2D(distortTexture,v_uv) * .4;       \r\n    vec4 noise = texture2D(noiseTexture, dist.xy + v_uv_a.xy);\r\n    //gl_FragColor = noise;\r\n    vec4 stone = texture2D(stoneTexture, v_uv + noise.xy *.02);\r\n    stone.r -= 0.25;     \r\n    float sharpnoise = smoothstep(0.1,1.,noise.r) + step(.7,noise.g);\r\n    gl_FragColor = stone + vec4(sharpnoise);\r\n}\r\n`;\r\n"],"sourceRoot":""}
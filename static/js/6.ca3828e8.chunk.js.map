{"version":3,"sources":["shaders/ConcentricCircle/fragment.js","shaders/ConcentricCircle/vertex.js","components/ConcentricCircle.js","overlays/Shaders.js"],"names":["fragmentShader","vertexShader","ConcentricCircleMesh","material","THREE","extensions","derivatives","side","uniforms","time","value","resolution","type","uvRate1","clock","useFrame","getElapsedTime","args","ConcentricCircle","inspiration","useEffect","document","title","gl","antialias","alpha","camera","position","near","far","onCreated","setClearColor","intensity","className","href","Shaders","vertex","fragment","styles","useState","display","setDisplay","shader","setShader","setType","handleClick","e","style","undefined","top","right","onClick"],"mappings":"+JAAaA,EAAc,guBCAdC,EAAY,gPCOzB,SAASC,IACP,IAAMC,EAAW,IAAIC,iBAAqB,CACxCC,WAAY,CACVC,YAAa,mDAEfC,KAAMH,aACNH,eACAD,iBACAQ,SAAU,CACRC,KAAM,CACJC,MAAO,GAETC,WAAY,CAAEC,KAAM,KAAMF,MAAO,IAAIN,WACrCS,QAAS,CACPH,MAAO,IAAIN,UAAc,EAAG,OAK5BU,EAAQ,IAAIV,QAKlB,OAJAW,aAAS,WACP,IAAIN,EAAOK,EAAME,iBACjBb,EAASK,SAASC,KAAKC,MAAQD,KAG/B,sBAAMN,SAAUA,EAAhB,SACE,qCAAqBc,KAAM,CAAC,EAAG,EAAG,OAmCzBC,UA/Bf,YAA4C,IAAhBC,EAAe,EAAfA,YAO1B,OANAC,qBAAU,WAER,OADAC,SAASC,MAAQ,mBACV,WACLD,SAASC,MAAQ,cAElB,IAED,qCACE,eAAC,IAAD,CACEC,GAAI,CAAEC,WAAW,EAAOC,OAAO,GAC/BC,OAAQ,CAAEC,SAAU,CAAC,EAAG,EAAG,GAAIC,KAAM,KAAOC,IAAK,KACjDC,UAAW,qBAAGP,GAAYQ,cAAc,UAH1C,UAKE,iCACA,4BAAYJ,SAAU,CAAC,IAAK,IAAK,KAAMK,UAAW,MAClD,cAAC,WAAD,UACE,cAAC9B,EAAD,MAEF,cAAC,IAAD,OAEDiB,GACC,sBAAKc,UAAU,cAAf,2BACgB,mBAAGC,KAAMf,EAAT,qBAGlB,cAACgB,EAAA,EAAD,CAASC,OAAQnC,EAAcoC,SAAUrC,S,0DC3BhCmC,IAlCf,YAA+C,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,SAASC,EAAU,EAAVA,OAAU,EAEdC,mBAAS,QAFK,mBAErCC,EAFqC,KAE5BC,EAF4B,OAGhBF,mBAASF,GAHO,mBAGrCK,EAHqC,KAG7BC,EAH6B,OAIpBJ,mBAAS,IAJW,mBAIrC3B,EAJqC,KAI/BgC,EAJ+B,KAKtCC,EAAc,SAACC,GACAH,EAAb,aAANG,EAA6BT,EAAsBD,GAChCQ,EAAb,aAANE,EAA2B,WAAsB,UACjDL,EAAW,UAKb,OACE,qCACE,sBAAKR,UAAU,kBAAmBc,WAAgBC,IAATV,EAAmB,CAACW,IAAI,EAAEC,MAAM,GAAGZ,EAA5E,UACKD,GACC,wBAAQc,QAAS,kBAAMN,EAAY,aAAnC,sBAEDT,GACC,wBAAQe,QAAS,kBAAMN,EAAY,WAAnC,uBAGN,sBAAKZ,UAAU,2BAA2Bc,MAAO,CAACP,QAAQA,GAA1D,UACE,qBAAKP,UAAU,QAAQkB,QAAS,WAbpCV,EAAW,SAaP,mBACA,sBAAKR,UAAU,iBAAf,UACE,+BAAKrB,EAAL,aACA,8BAAM8B","file":"static/js/6.ca3828e8.chunk.js","sourcesContent":["export const fragmentShader = `\r\nprecision mediump float;\r\nuniform float time;\r\nuniform vec2 u_resolution;\r\nuniform sampler2D texture1;\r\nuniform vec4 resolution;\r\nvarying vec2 vUv;\r\nvarying vec3 vPosition;\r\nfloat pi = 3.141592653589793238;\r\n\r\nfloat circleshape(vec2 position, float radius, vec2 center){\r\n    float x = length(position-center);\r\n    float sg = sin(150.*(x) + 1.5*time)*0.2;\r\n    return step(0.1, sg) + step(-0.19,sg);\r\n}   \r\n\r\nvoid main(){\r\n    vec2 uv = vUv; \r\n    vec3 color = vec3(0.0);\r\n    vec2 c1 = vec2(0.15,0.5);\r\n    vec2 c2 = vec2(1.-0.15,0.5);\r\n    float circle1 = circleshape(uv, .1,c1);\r\n    float circle2 = circleshape(uv, .1,c2);\r\n    color = vec3(circle1*circle2);\r\n    color = 1. - color;\r\n    gl_FragColor = vec4(color, 1.0);\r\n}\r\n`;\r\n","export const vertexShader = `\r\nprecision mediump float;\r\nuniform float time;\r\nvarying vec2 vUv;\r\nvarying vec3 vPosition;\r\nfloat PI = 3.141592653589793238;\r\nvoid main(){    \r\n  vUv = uv;\r\n \tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}\r\n`;\r\n","import React, { Suspense,useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Canvas, useFrame } from \"react-three-fiber\";\r\nimport { OrbitControls } from \"@react-three/drei\";\r\nimport Shaders from \"../overlays/Shaders\";\r\nimport { fragmentShader } from \"../shaders/ConcentricCircle/fragment\";\r\nimport { vertexShader } from \"../shaders/ConcentricCircle/vertex\";\r\nfunction ConcentricCircleMesh() {\r\n  const material = new THREE.ShaderMaterial({\r\n    extensions: {\r\n      derivatives: \"#extension GL_OES_standard_derivatives : enable\",\r\n    },\r\n    side: THREE.DoubleSide,\r\n    vertexShader,\r\n    fragmentShader,\r\n    uniforms: {\r\n      time: {\r\n        value: 0.0,\r\n      },\r\n      resolution: { type: \"v4\", value: new THREE.Vector4() },\r\n      uvRate1: {\r\n        value: new THREE.Vector2(1, 1),\r\n      },\r\n    },\r\n  });\r\n\r\n  const clock = new THREE.Clock();\r\n  useFrame(() => {\r\n    let time = clock.getElapsedTime();\r\n    material.uniforms.time.value = time;\r\n  });\r\n  return (\r\n    <mesh material={material}>\r\n      <planeBufferGeometry args={[3, 3, 3]} />\r\n    </mesh>\r\n  );\r\n}\r\nfunction ConcentricCircle({ inspiration }) {\r\n  useEffect(() => {\r\n    document.title = \"ConcentricCircle\"    \r\n    return ()=>{\r\n      document.title = \"WebGlfun\"\r\n    }\r\n  }, [])\r\n  return (\r\n    <>\r\n      <Canvas\r\n        gl={{ antialias: false, alpha: false }}\r\n        camera={{ position: [0, 0, 2], near: 0.001, far: 1000 }}\r\n        onCreated={({ gl }) => gl.setClearColor(\"white\")}\r\n      >\r\n        <ambientLight />\r\n        <pointLight position={[150, 150, 150]} intensity={0.55} />\r\n        <Suspense>\r\n          <ConcentricCircleMesh />\r\n        </Suspense>\r\n        <OrbitControls />\r\n      </Canvas>\r\n      {inspiration && (\r\n        <div className=\"inspiration\">\r\n          Inspired from <a href={inspiration}>post</a>\r\n        </div>\r\n      )}\r\n      <Shaders vertex={vertexShader} fragment={fragmentShader} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ConcentricCircle;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction Shaders({ vertex, fragment,styles }) {\r\n  // const [open, setOpen] = useState(false);\r\n  const [display, setDisplay] = useState('none')\r\n  const [shader, setShader] = useState(fragment);\r\n  const [type, setType] = useState('');\r\n  const handleClick = (e) => {\r\n    e === \"fragment\" ? setShader(fragment) : setShader(vertex);\r\n    e === \"fragment\" ? setType('fragment') : setType('vertex');\r\n    setDisplay('block')\r\n  };\r\n  const handleClose = ()=>{\r\n    setDisplay('none')\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"shaders-section\"  style={styles===undefined?{top:0,right:0}:styles}>                \r\n          {fragment && (\r\n            <button onClick={() => handleClick(\"fragment\")}>fragment</button>\r\n          )}\r\n          {vertex && (\r\n            <button onClick={() => handleClick(\"vertex\")}>vertex</button>\r\n          )}          \r\n      </div>\r\n      <div className=\"shader-overlay-container\" style={{display:display}}>\r\n        <div className=\"close\" onClick={()=>handleClose()}>close</div>\r\n        <div className=\"shader-overlay\">\r\n          <h1>{type} shader</h1>\r\n          <pre>{shader}</pre>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Shaders;\r\n"],"sourceRoot":""}
{"version":3,"sources":["shaders/rainbow-waves/fragment.js","shaders/rainbow-waves/vertex.js","components/RainbowWaves.js","overlays/Shaders.js"],"names":["fragmentShader","vertexShader","RainbowWaveseMesh","material","THREE","extensions","derivatives","side","uniforms","time","value","resolution","type","clock","useFrame","getElapsedTime","args","RainbowWaves","inspiration","gl","antialias","alpha","camera","position","near","far","onCreated","setClearColor","intensity","className","href","Shaders","vertex","fragment","styles","useState","display","setDisplay","shader","setShader","setType","handleClick","e","style","undefined","top","right","onClick"],"mappings":"+JAAaA,EAAc,42BCAdC,EAAY,sNCOzB,SAASC,IACP,IAAMC,EAAW,IAAIC,iBAAqB,CACxCC,WAAY,CACVC,YAAa,mDAEfC,KAAMH,aACNH,eACAD,iBACAQ,SAAU,CACRC,KAAM,CACJC,MAAO,GAETC,WAAY,CAAEC,KAAM,KAAMF,MAAO,IAAIN,cAGnCS,EAAQ,IAAIT,QAKlB,OAJAU,aAAS,WACP,IAAIL,EAAOI,EAAME,iBACjBZ,EAASK,SAASC,KAAKC,MAAQD,KAG/B,sBAAMN,SAAUA,EAAhB,SACE,qCAAqBa,KAAM,CAAC,EAAG,EAAG,OA0BzBC,UAtBf,YAAwC,IAAhBC,EAAe,EAAfA,YACtB,OACE,qCACE,eAAC,IAAD,CACEC,GAAI,CAAEC,WAAW,EAAOC,OAAO,GAC/BC,OAAQ,CAAEC,SAAU,CAAC,EAAG,EAAG,GAAIC,KAAM,KAAOC,IAAK,KACjDC,UAAW,qBAAGP,GAAYQ,cAAc,UAH1C,UAKE,iCACA,4BAAYJ,SAAU,CAAC,IAAK,IAAK,KAAMK,UAAW,MAClD,cAAC,WAAD,UACE,cAAC1B,EAAD,MAEF,cAAC,IAAD,OAGJgB,GACA,sBAAKW,UAAU,cAAf,2BAA2C,mBAAGC,KAAMZ,EAAT,qBAf3C,SAgBK,cAACa,EAAA,EAAD,CAASC,OAAQ/B,EAAcgC,SAAUjC,S,0DCfnC+B,IAlCf,YAA+C,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,SAASC,EAAU,EAAVA,OAAU,EAEdC,mBAAS,QAFK,mBAErCC,EAFqC,KAE5BC,EAF4B,OAGhBF,mBAASF,GAHO,mBAGrCK,EAHqC,KAG7BC,EAH6B,OAIpBJ,mBAAS,IAJW,mBAIrCvB,EAJqC,KAI/B4B,EAJ+B,KAKtCC,EAAc,SAACC,GACAH,EAAb,aAANG,EAA6BT,EAAsBD,GAChCQ,EAAb,aAANE,EAA2B,WAAsB,UACjDL,EAAW,UAKb,OACE,qCACE,sBAAKR,UAAU,kBAAmBc,WAAgBC,IAATV,EAAmB,CAACW,IAAI,EAAEC,MAAM,GAAGZ,EAA5E,UACKD,GACC,wBAAQc,QAAS,kBAAMN,EAAY,aAAnC,sBAEDT,GACC,wBAAQe,QAAS,kBAAMN,EAAY,WAAnC,uBAGN,sBAAKZ,UAAU,2BAA2Bc,MAAO,CAACP,QAAQA,GAA1D,UACE,qBAAKP,UAAU,QAAQkB,QAAS,WAbpCV,EAAW,SAaP,mBACA,sBAAKR,UAAU,iBAAf,UACE,+BAAKjB,EAAL,aACA,8BAAM0B","file":"static/js/8.0031df5f.chunk.js","sourcesContent":["export const fragmentShader = `\r\nuniform float time;\r\nuniform vec4 resolution;\r\nvarying vec2 vUv;\r\nvarying vec3 vPosition;\r\nfloat pi = 3.141592653589793238;\r\n\r\nfloat plot(vec2 pos, float y){        \r\n    return smoothstep(y-.01,y,pos.y)-smoothstep(y,y+.01,pos.y);\r\n}\r\n\r\nvoid main(){\r\n    vec2 uv = vUv;\r\n    float u_time = time;\r\n    float graph = sin(5.*uv.x - 2.5) - 1.5;\r\n        float waves  = 0.3*(graph-0.1);        \r\n        float r=0.;\r\n        float g=0.;\r\n        float b=0.;\r\n        for(int i = 0; i < 120; i++){\r\n            float x=float(i);\r\n            r +=plot(uv,0.4*(graph+0.1+.05*x))*abs(sin(u_time*4.+x));                     \r\n            g +=plot(uv,0.4*(graph+0.1+.05*x))*abs(sin(u_time*3.+x+10.));\r\n            b +=plot(uv,0.4*(graph+0.1+.05*x))*sin(u_time*5.+x+5.);\r\n        }                \r\n        vec3 rgb = vec3(r,g,b);        \r\n        gl_FragColor = vec4(rgb, 1.0);\r\n}\r\n`;\r\n","export const vertexShader = `\r\nuniform float time;\r\nvarying vec2 vUv;\r\nvarying vec3 vPosition;\r\nfloat PI = 3.141592653589793238;\r\nvoid main(){    \r\n  vUv = uv;\r\n \tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}\r\n`;\r\n","import React, { Suspense } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Canvas, useFrame } from \"react-three-fiber\";\r\nimport { OrbitControls } from \"@react-three/drei\";\r\nimport Shaders from \"../overlays/Shaders\";\r\nimport { fragmentShader } from \"../shaders/rainbow-waves/fragment\";\r\nimport { vertexShader } from \"../shaders/rainbow-waves/vertex\";\r\nfunction RainbowWaveseMesh() {\r\n  const material = new THREE.ShaderMaterial({\r\n    extensions: {\r\n      derivatives: \"#extension GL_OES_standard_derivatives : enable\",\r\n    },\r\n    side: THREE.DoubleSide,\r\n    vertexShader,\r\n    fragmentShader,\r\n    uniforms: {\r\n      time: {\r\n        value: 0.0,\r\n      },\r\n      resolution: { type: \"v4\", value: new THREE.Vector4() },\r\n    },\r\n  });\r\n  const clock = new THREE.Clock();\r\n  useFrame(() => {\r\n    let time = clock.getElapsedTime();\r\n    material.uniforms.time.value = time;\r\n  });\r\n  return (\r\n    <mesh material={material}>\r\n      <planeBufferGeometry args={[3, 3, 3]} />\r\n    </mesh>\r\n  );\r\n}\r\nfunction RainbowWaves({ inspiration }) {\r\n  return (\r\n    <>      \r\n      <Canvas\r\n        gl={{ antialias: false, alpha: false }}\r\n        camera={{ position: [0, 0, 2], near: 0.001, far: 1000 }}\r\n        onCreated={({ gl }) => gl.setClearColor(\"white\")}\r\n      >\r\n        <ambientLight />\r\n        <pointLight position={[150, 150, 150]} intensity={0.55} />\r\n        <Suspense>\r\n          <RainbowWaveseMesh />\r\n        </Suspense>\r\n        <OrbitControls />\r\n      </Canvas>\r\n      {\r\n    inspiration &&\r\n    <div className=\"inspiration\">Inspired from <a href={inspiration}>post</a></div>\r\n  }      <Shaders vertex={vertexShader} fragment={fragmentShader} />\r\n    </>\r\n  );\r\n}\r\nexport default RainbowWaves;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction Shaders({ vertex, fragment,styles }) {\r\n  // const [open, setOpen] = useState(false);\r\n  const [display, setDisplay] = useState('none')\r\n  const [shader, setShader] = useState(fragment);\r\n  const [type, setType] = useState('');\r\n  const handleClick = (e) => {\r\n    e === \"fragment\" ? setShader(fragment) : setShader(vertex);\r\n    e === \"fragment\" ? setType('fragment') : setType('vertex');\r\n    setDisplay('block')\r\n  };\r\n  const handleClose = ()=>{\r\n    setDisplay('none')\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"shaders-section\"  style={styles===undefined?{top:0,right:0}:styles}>                \r\n          {fragment && (\r\n            <button onClick={() => handleClick(\"fragment\")}>fragment</button>\r\n          )}\r\n          {vertex && (\r\n            <button onClick={() => handleClick(\"vertex\")}>vertex</button>\r\n          )}          \r\n      </div>\r\n      <div className=\"shader-overlay-container\" style={{display:display}}>\r\n        <div className=\"close\" onClick={()=>handleClose()}>close</div>\r\n        <div className=\"shader-overlay\">\r\n          <h1>{type} shader</h1>\r\n          <pre>{shader}</pre>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Shaders;\r\n"],"sourceRoot":""}
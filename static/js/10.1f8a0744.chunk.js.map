{"version":3,"sources":["../node_modules/three/examples/jsm/shaders/LuminosityHighPassShader.js","../node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js","../node_modules/@react-three/drei/Effects.js","shaders/DistortedParticlePlane/ParticleShaderMaterial.js","components/DistortedParticlePlane.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"names":["LuminosityHighPassShader","shaderID","uniforms","value","Color","vertexShader","join","fragmentShader","UnrealBloomPass","resolution","strength","radius","threshold","Pass","call","this","undefined","Vector2","x","y","clearColor","pars","minFilter","LinearFilter","magFilter","format","RGBAFormat","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","WebGLRenderTarget","texture","name","generateMipmaps","i","renderTargetHorizonal","push","renderTargetVertical","console","error","highPassShader","highPassUniforms","UniformsUtils","clone","materialHighPassFilter","ShaderMaterial","defines","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomTintColors","Vector3","CopyShader","copyShader","copyUniforms","materialCopy","blending","AdditiveBlending","depthTest","depthWrite","transparent","enabled","needsSwap","oldClearColor","oldClearAlpha","basic","MeshBasicMaterial","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","dispose","length","setSize","width","height","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","copy","getClearColor","getClearAlpha","oldAutoClear","autoClear","setClearColor","state","buffers","stencil","setTest","renderToScreen","material","map","setRenderTarget","clear","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","extend","EffectComposer","RenderPass","ShaderPass","Effects","children","multisamping","renderIndex","composer","useRef","useThree","scene","camera","gl","size","useState","canvas","document","createElement","window","WebGL2RenderingContext","getContext","e","isWebGL2Available","t","WebGLMultisampleRenderTarget","encoding","sRGBEncoding","samples","target","useEffect","_composer$current","_composer$current2","current","setPixelRatio","getPixelRatio","useFrame","_composer$current3","React","ref","args","attachArray","GammaCorrectionShader","ParticleShaderMaterial","time","type","tParticle","THREE","Particle","count","speed","useTexture","clock","getElapsedTime","rotation","PI","attach","DistortedParticlePlane","inspiration","data","setData","title","position","fallback","autoRotate","autoRotateSpeed","className","style","color","href","onUpdate","newData","path","label","min","max","step","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","apply","_objectSpread2","arguments","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty"],"mappings":"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","file":"static/js/10.1f8a0744.chunk.js","sourcesContent":["import {\n\tColor\n} from \"../../../build/three.module.js\";\n\n/**\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nvar LuminosityHighPassShader = {\n\n\tshaderID: \"luminosityHighPass\",\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"luminosityThreshold\": { value: 1.0 },\n\t\t\"smoothWidth\": { value: 1.0 },\n\t\t\"defaultColor\": { value: new Color( 0x000000 ) },\n\t\t\"defaultOpacity\": { value: 0.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform vec3 defaultColor;\",\n\t\t\"uniform float defaultOpacity;\",\n\t\t\"uniform float luminosityThreshold;\",\n\t\t\"uniform float smoothWidth;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\"\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\",\n\n\t\t\"\tfloat v = dot( texel.xyz, luma );\",\n\n\t\t\"\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\",\n\n\t\t\"\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\",\n\n\t\t\"\tgl_FragColor = mix( outputColor, texel, alpha );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { LuminosityHighPassShader };\n","import {\n\tAdditiveBlending,\n\tColor,\n\tLinearFilter,\n\tMeshBasicMaterial,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\n\n/**\n * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a\n * mip map chain of bloom textures and blurs them with different radii. Because\n * of the weighted combination of mips, and because larger blurs are done on\n * higher mips, this effect provides good quality and performance.\n *\n * Reference:\n * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\nvar UnrealBloomPass = function ( resolution, strength, radius, threshold ) {\n\n\tPass.call( this );\n\n\tthis.strength = ( strength !== undefined ) ? strength : 1;\n\tthis.radius = radius;\n\tthis.threshold = threshold;\n\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t// create color only once here, reuse it later inside the render function\n\tthis.clearColor = new Color( 0, 0, 0 );\n\n\t// render targets\n\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\tthis.renderTargetsHorizontal = [];\n\tthis.renderTargetsVertical = [];\n\tthis.nMips = 5;\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, pars );\n\tthis.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tvar renderTargetHorizonal = new WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\n\n\t\tvar renderTargetVertical = new WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// luminosity high pass material\n\n\tif ( LuminosityHighPassShader === undefined )\n\t\tconsole.error( \"UnrealBloomPass relies on LuminosityHighPassShader\" );\n\n\tvar highPassShader = LuminosityHighPassShader;\n\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\n\n\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = threshold;\n\tthis.highPassUniforms[ \"smoothWidth\" ].value = 0.01;\n\n\tthis.materialHighPassFilter = new ShaderMaterial( {\n\t\tuniforms: this.highPassUniforms,\n\t\tvertexShader: highPassShader.vertexShader,\n\t\tfragmentShader: highPassShader.fragmentShader,\n\t\tdefines: {}\n\t} );\n\n\t// Gaussian Blur Materials\n\tthis.separableBlurMaterials = [];\n\tvar kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// Composite material\n\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\n\tthis.compositeMaterial.uniforms[ \"blurTexture1\" ].value = this.renderTargetsVertical[ 0 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture2\" ].value = this.renderTargetsVertical[ 1 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture3\" ].value = this.renderTargetsVertical[ 2 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture4\" ].value = this.renderTargetsVertical[ 3 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture5\" ].value = this.renderTargetsVertical[ 4 ].texture;\n\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = strength;\n\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = 0.1;\n\tthis.compositeMaterial.needsUpdate = true;\n\n\tvar bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\tthis.compositeMaterial.uniforms[ \"bloomFactors\" ].value = bloomFactors;\n\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ),\n\t\t\t\t\t\t\t new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\n\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t// copy material\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( \"UnrealBloomPass relies on CopyShader\" );\n\n\t}\n\n\tvar copyShader = CopyShader;\n\n\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\tthis.copyUniforms[ \"opacity\" ].value = 1.0;\n\n\tthis.materialCopy = new ShaderMaterial( {\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tblending: AdditiveBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true\n\t} );\n\n\tthis.enabled = true;\n\tthis.needsSwap = false;\n\n\tthis.oldClearColor = new Color();\n\tthis.oldClearAlpha = 1;\n\n\tthis.basic = new MeshBasicMaterial();\n\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\n\n};\n\nUnrealBloomPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: UnrealBloomPass,\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tvar resx = Math.round( width / 2 );\n\t\tvar resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t},\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tthis.oldClearColor.copy( renderer.getClearColor() );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tvar inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t},\n\n\tgetSeperableBlurMaterial: function ( kernelRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"KERNEL_RADIUS\": kernelRadius,\n\t\t\t\t\"SIGMA\": kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"colorTexture\": { value: null },\n\t\t\t\t\"texSize\": { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t\"direction\": { value: new Vector2( 0.5, 0.5 ) }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"#include <common>\\\n\t\t\t\tvarying vec2 vUv;\\n\\\n\t\t\t\tuniform sampler2D colorTexture;\\n\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec2 direction;\\\n\t\t\t\t\\\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n\t\t\t\t}\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tfloat fSigma = float(SIGMA);\\\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\\\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\n\t\t\t\t\t\tfloat x = float(i);\\\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\\\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\\\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\\\n\t\t\t\t\t\tweightSum += 2.0 * w;\\\n\t\t\t\t\t}\\\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\\n\t\t\t\t}\"\n\t\t} );\n\n\t},\n\n\tgetCompositeMaterial: function ( nMips ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"NUM_MIPS\": nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"blurTexture1\": { value: null },\n\t\t\t\t\"blurTexture2\": { value: null },\n\t\t\t\t\"blurTexture3\": { value: null },\n\t\t\t\t\"blurTexture4\": { value: null },\n\t\t\t\t\"blurTexture5\": { value: null },\n\t\t\t\t\"dirtTexture\": { value: null },\n\t\t\t\t\"bloomStrength\": { value: 1.0 },\n\t\t\t\t\"bloomFactors\": { value: null },\n\t\t\t\t\"bloomTintColors\": { value: null },\n\t\t\t\t\"bloomRadius\": { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D blurTexture1;\\\n\t\t\t\tuniform sampler2D blurTexture2;\\\n\t\t\t\tuniform sampler2D blurTexture3;\\\n\t\t\t\tuniform sampler2D blurTexture4;\\\n\t\t\t\tuniform sampler2D blurTexture5;\\\n\t\t\t\tuniform sampler2D dirtTexture;\\\n\t\t\t\tuniform float bloomStrength;\\\n\t\t\t\tuniform float bloomRadius;\\\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\\\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\\\n\t\t\t\t\\\n\t\t\t\tfloat lerpBloomFactor(const in float factor) { \\\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\\\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\\\n\t\t\t\t}\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\n\t\t\t\t}\"\n\t\t} );\n\n\t}\n\n} );\n\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { UnrealBloomPass };\n","import React, { useRef, useState, useEffect } from 'react';\nimport { extend, useThree, useFrame } from 'react-three-fiber';\nimport { WebGLMultisampleRenderTarget, RGBAFormat, sRGBEncoding } from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { GammaCorrectionShader } from 'three/examples/jsm/shaders/GammaCorrectionShader';\n\nextend({\n  EffectComposer,\n  RenderPass,\n  ShaderPass\n});\nconst isWebGL2Available = () => {\n  try {\n    var canvas = document.createElement('canvas');\n    return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));\n  } catch (e) {\n    return false;\n  }\n};\nfunction Effects({\n  children,\n  multisamping = 8,\n  renderIndex = 1\n}) {\n  const composer = useRef();\n  const {\n    scene,\n    camera,\n    gl,\n    size\n  } = useThree();\n  const [target] = useState(() => {\n    if (isWebGL2Available() && multisamping > 0) {\n      const t = new WebGLMultisampleRenderTarget(size.width, size.height, {\n        format: RGBAFormat,\n        encoding: sRGBEncoding\n      });\n      t.samples = 8;\n      return t;\n    }\n  });\n  useEffect(() => {\n    var _composer$current, _composer$current2;\n\n    (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height);\n    (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.setPixelRatio(gl.getPixelRatio());\n  }, [gl, size]);\n  useFrame(() => {\n    var _composer$current3;\n\n    return (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.render();\n  }, renderIndex);\n  return /*#__PURE__*/React.createElement(\"effectComposer\", {\n    ref: composer,\n    args: [gl, target]\n  }, /*#__PURE__*/React.createElement(\"renderPass\", {\n    attachArray: \"passes\",\n    args: [scene, camera]\n  }), /*#__PURE__*/React.createElement(\"shaderPass\", {\n    attachArray: \"passes\",\n    args: [GammaCorrectionShader]\n  }), children);\n}\n\nexport { Effects, isWebGL2Available };\n","import * as THREE from 'three'\r\nimport { extend } from 'react-three-fiber'\r\nconst fragmentShader = `\r\nprecision mediump float;\r\nuniform float time;\r\nuniform sampler2D tParticle;\r\nvarying vec2 vUv;\r\nvarying vec3 vPosition;\r\nvoid main(){\r\n  vec4 particleTexture = texture2D(tParticle, gl_PointCoord);\r\n  float c = 1. - particleTexture.r;  \r\n  gl_FragColor = vec4(c,c,c,1.);\r\n  gl_FragColor.r *= vPosition.x;\r\n  gl_FragColor.g *= vPosition.y;\r\n  if(c<0.02)  \r\n  discard;\r\n}`\r\nconst vertexShader = `\r\nprecision mediump float;\r\nuniform float time;\r\nuniform sampler2D tParticle;\r\nvarying vec2 vUv;\r\nvarying vec3 vPosition;\r\n//\tClassic Perlin 3D Noise \r\n//\tby Stefan Gustavson\r\n//\r\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\r\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\r\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\r\n\r\nfloat cnoise(vec3 P){\r\n  vec3 Pi0 = floor(P); // Integer part for indexing\r\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\r\n  Pi0 = mod(Pi0, 289.0);\r\n  Pi1 = mod(Pi1, 289.0);\r\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\r\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n  vec4 iz0 = Pi0.zzzz;\r\n  vec4 iz1 = Pi1.zzzz;\r\n\r\n  vec4 ixy = permute(permute(ix) + iy);\r\n  vec4 ixy0 = permute(ixy + iz0);\r\n  vec4 ixy1 = permute(ixy + iz1);\r\n\r\n  vec4 gx0 = ixy0 / 7.0;\r\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\r\n  gx0 = fract(gx0);\r\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r\n  vec4 sz0 = step(gz0, vec4(0.0));\r\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\r\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\r\n\r\n  vec4 gx1 = ixy1 / 7.0;\r\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\r\n  gx1 = fract(gx1);\r\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r\n  vec4 sz1 = step(gz1, vec4(0.0));\r\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\r\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\r\n\r\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r\n\r\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n  g000 *= norm0.x;\r\n  g010 *= norm0.y;\r\n  g100 *= norm0.z;\r\n  g110 *= norm0.w;\r\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n  g001 *= norm1.x;\r\n  g011 *= norm1.y;\r\n  g101 *= norm1.z;\r\n  g111 *= norm1.w;\r\n\r\n  float n000 = dot(g000, Pf0);\r\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\r\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\r\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\r\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\r\n  float n111 = dot(g111, Pf1);\r\n\r\n  vec3 fade_xyz = fade(Pf0);\r\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \r\n  return 2.2 * n_xyz;\r\n}\r\nfloat rand(vec2 co){\r\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\r\n}\r\nvoid main(){    \r\n  vUv = uv;  \r\n  vec3 pos = position;  \r\n  float n = cnoise(pos + time);\r\n  pos.z = n;\r\n  vPosition = pos;\r\n  vec4 mvposition =  modelViewMatrix * vec4(pos, 1.0);\r\n  gl_PointSize = 50.*(0.05-n) * (1. / -mvposition.z);\r\n  gl_Position = projectionMatrix * mvposition;\r\n}`\r\nclass ParticleShaderMaterial extends THREE.ShaderMaterial {\r\n  constructor() {\r\n    super({\r\n      uniforms: {\r\n        time: { type: 'f', value: 0 },\r\n        tParticle: { type: 't', value: null },        \r\n      },\r\n      vertexShader: vertexShader,\r\n      fragmentShader: fragmentShader,\r\n    })\r\n  }\r\n  get time() {\r\n    return this.uniforms.time.value\r\n  }\r\n  set time(value) {\r\n    this.uniforms.time.value = value\r\n  }\r\n  get tParticle() {\r\n    return this.uniforms.tParticle.value\r\n  }\r\n  set tParticle(value) {\r\n    this.uniforms.tParticle.value = value\r\n  }  \r\n}\r\nextend({ ParticleShaderMaterial })\r\n","import React, { Suspense, useEffect, useRef, useState } from \"react\";\r\nimport { Canvas, extend, useFrame } from \"react-three-fiber\";\r\nimport { OrbitControls, useTexture } from \"@react-three/drei\";\r\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\r\nimport { ShaderPass } from \"three/examples/jsm/postprocessing/ShaderPass\";\r\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\r\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\r\nimport { Effects } from \"@react-three/drei/Effects\";\r\nimport DatGui, { DatNumber, DatFolder } from \"react-dat-gui\";\r\nimport \"../shaders/DistortedParticlePlane/ParticleShaderMaterial\";\r\nimport \"react-dat-gui/dist/index.css\";\r\nextend({ EffectComposer, ShaderPass, RenderPass, UnrealBloomPass });\r\nfunction Particle({ count, speed = 0.1 }) {\r\n  const ref = useRef(null);\r\n  const tParticle = useTexture(\r\n    \"images/DistortedParticlePlane/particle_mask.jpg\"\r\n  );\r\n  useFrame((state) => {\r\n    ref.current.material.time = state.clock.getElapsedTime() * speed;\r\n  });\r\n  return (\r\n    <points ref={ref} rotation={[Math.PI / 2, 0, 0]}>\r\n      <planeGeometry args={[20, 20, count, count]} attach=\"geometry\" />\r\n      <particleShaderMaterial tParticle={tParticle} />\r\n    </points>\r\n  );\r\n}\r\nfunction DistortedParticlePlane({ inspiration }) {\r\n  const [data, setData] = useState({\r\n    count: 150,\r\n    speed: 0.1,\r\n  });\r\n  const handleUpdate = (newData) => {\r\n    setData(newData);\r\n  };\r\n  useEffect(() => {\r\n    document.title = \"Distorted Particle Plane\";\r\n    return () => {\r\n      document.title = \"WebGlfun\";\r\n    };\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Canvas camera={{ position: [2, 2.5, 2] }}>\r\n        <color attach=\"background\" args={[\"black\"]} />\r\n        <Suspense fallback={null}>\r\n          <Particle {...data} />\r\n        </Suspense>\r\n        <Effects>\r\n          <unrealBloomPass attachArray=\"passes\" args={[undefined, 1.5, 1, 0]} />\r\n        </Effects>\r\n        <OrbitControls autoRotate autoRotateSpeed={0.2} />\r\n      </Canvas>\r\n      {inspiration && (\r\n        <div className=\"inspiration\" style={{ color: \"white\" }}>\r\n          Inspired from <a href={inspiration}>here</a>\r\n        </div>\r\n      )}\r\n      <div className=\"gui\">\r\n        <DatGui data={data} onUpdate={handleUpdate}>\r\n          <DatFolder title=\"Play with settings\">\r\n            <DatNumber\r\n              path=\"count\"\r\n              label=\"count\"\r\n              min={10}\r\n              max={500}\r\n              step={50}\r\n            />\r\n            <DatNumber\r\n              path=\"speed\"\r\n              label=\"speed \"\r\n              min={0}\r\n              max={1}\r\n              step={0.01}\r\n            />\r\n          </DatFolder>\r\n        </DatGui>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DistortedParticlePlane;\r\n","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}"],"sourceRoot":""}
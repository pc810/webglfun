{"version":3,"sources":["components/MoirePattern.js","shaders/MoirePattern/vertex.js","shaders/MoirePattern/fragment.js"],"names":["MoirePatternMesh","p1","useRef","p2","material","THREE","extensions","derivatives","side","vertexShader","fragmentShader","uniforms","resolution","type","value","sides","transparent","clock","useFrame","time","getElapsedTime","current","rotation","z","position","x","Math","sin","ref","args","MoirePattern","useEffect","document","title","gl","antialias","alpha","camera","near","far","onCreated","setClearColor","intensity"],"mappings":"gJAOA,SAASA,IACP,IAAMC,EAAKC,mBACLC,EAAKD,mBACLE,EAAW,IAAIC,iBAAqB,CACxCC,WAAY,CACVC,YAAa,mDAEfC,KAAMH,aACNI,aCfqB,sNDgBrBC,eEhBuB,+UFiBvBC,SAAU,CACRC,WAAY,CAAEC,KAAM,KAAMC,MAAO,IAAIT,WACrCU,MAAO,CACLF,KAAM,IACNC,MAAO,IAGXE,aAAa,IAETC,EAAQ,IAAIZ,QAOlB,OALAa,aAAS,WACP,IAAIC,EAAOF,EAAMG,iBACjBnB,EAAGoB,QAAQC,SAASC,GAAK,KACzBpB,EAAGkB,QAAQG,SAASC,EAAI,GAAIC,KAAKC,IAAIR,EAAK,MAG1C,kCACE,sBAAMf,SAAUA,EAAUwB,IAAK3B,EAAIuB,SAAU,CAAC,EAAE,EAAE,KAAlD,SACE,qCAAqBK,KAAM,CAAC,EAAG,EAAG,OAEpC,sBAAMzB,SAAUA,EAAUwB,IAAKzB,EAAIqB,SAAU,CAAC,EAAE,EAAE,KAAlD,SACE,qCAAqBK,KAAM,CAAC,EAAG,EAAG,UA8B3BC,UAzBf,WAOE,OANAC,qBAAU,WAER,OADAC,SAASC,MAAQ,mBACV,WACLD,SAASC,MAAQ,cAElB,IAED,mCACE,eAAC,IAAD,CACEC,GAAI,CAAEC,WAAW,EAAOC,OAAO,GAC/BC,OAAQ,CAAEb,SAAU,CAAC,EAAG,EAAG,GAAIc,KAAM,KAAOC,IAAK,KACjDC,UAAW,qBAAGN,GAAYO,cAAc,UAH1C,UAKE,iCACA,4BAAYjB,SAAU,CAAC,IAAK,IAAK,KAAMkB,UAAW,MAClD,cAAC,WAAD,UACE,cAAC1C,EAAD","file":"static/js/14.18db94a5.chunk.js","sourcesContent":["import React, { Suspense, useEffect, useRef } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Canvas, useFrame } from \"react-three-fiber\";\r\n// import { OrbitControls } from \"@react-three/drei\";\r\nimport { fragmentShader } from \"../shaders/MoirePattern/fragment\";\r\nimport { vertexShader } from \"../shaders/MoirePattern/vertex\";\r\n\r\nfunction MoirePatternMesh() {\r\n  const p1 = useRef();\r\n  const p2 = useRef();\r\n  const material = new THREE.ShaderMaterial({\r\n    extensions: {\r\n      derivatives: \"#extension GL_OES_standard_derivatives : enable\",\r\n    },\r\n    side: THREE.DoubleSide,\r\n    vertexShader,\r\n    fragmentShader,\r\n    uniforms: {\r\n      resolution: { type: \"v4\", value: new THREE.Vector4() },\r\n      sides: {\r\n        type: \"f\",\r\n        value: 5.0,\r\n      },\r\n    },\r\n    transparent: true,\r\n  });\r\n  const clock = new THREE.Clock();\r\n\r\n  useFrame(() => {    \r\n    let time = clock.getElapsedTime();    \r\n    p1.current.rotation.z += 0.001;\r\n    p2.current.position.x = 0.2*Math.sin(time/4);   \r\n  });\r\n  return (\r\n    <group>\r\n      <mesh material={material} ref={p1} position={[0,0,1.5]}>\r\n        <planeBufferGeometry args={[3, 3, 3]} />\r\n      </mesh>\r\n      <mesh material={material} ref={p2} position={[0,0,1.5]}>\r\n        <planeBufferGeometry args={[3, 3, 3]} />\r\n      </mesh>\r\n    </group>\r\n  );\r\n}\r\nfunction MoirePattern() {  \r\n  useEffect(() => {\r\n    document.title = \"MoirÃ© pattern\";\r\n    return () => {\r\n      document.title = \"WebGlfun\";\r\n    };\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Canvas\r\n        gl={{ antialias: false, alpha: false }}\r\n        camera={{ position: [0, 0, 2], near: 0.001, far: 1000 }}\r\n        onCreated={({ gl }) => gl.setClearColor(\"white\")}\r\n      >\r\n        <ambientLight />\r\n        <pointLight position={[150, 150, 150]} intensity={0.55} />\r\n        <Suspense>\r\n          <MoirePatternMesh />\r\n        </Suspense>\r\n        {/* <OrbitControls /> */}\r\n      </Canvas>      \r\n    </>\r\n  );\r\n}\r\n\r\nexport default MoirePattern;\r\n","export const vertexShader = `\r\nuniform float time;\r\nvarying vec2 vUv;\r\nvarying vec3 vPosition;\r\nfloat PI = 3.141592653589793238;\r\nvoid main(){    \r\n  vUv = uv;\r\n \tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n}\r\n`;\r\n","export const fragmentShader = `\r\nuniform float time;\r\nuniform vec4 resolution;\r\nvarying vec2 vUv;\r\nvarying vec3 vPosition;\r\nfloat pi = 3.141592653589793238;\r\n\r\n\r\nvoid main(){\r\n    vec2 uv = vUv;     \r\n    uv.x = fract(vUv*300.).x;\r\n    float color = step(0.2, uv.x);    \r\n    color *= step(0.4, uv.x);    \r\n    gl_FragColor = vec4(vec3(color), 1.-color*1.0);\r\n}\r\n`;\r\n"],"sourceRoot":""}